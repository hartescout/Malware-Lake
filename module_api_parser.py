# -*- coding: utf-8 -*-
"""
Created on Fri Mar 27 17:27:42 2020

@author: Danus
"""

import requests
from datetime import datetime

"""
Constant dictionary that defines all possible repsonses that can return from AP calls
that can return from Malware Bazaar
"""
const_dict_resposne_bazzar = {
    "ok": True,
    "illegal_hash": "Illegal hash!",
    "hash_not_found": "Hash not found!",
    "no_hash_provided": "No hash provided!",
    "http_post_expected": "Http post command expected!"
    }


"""
This function returns extra information about a SHA256 hash from Malware Bazaar
IN - API Key for Malware Bazaar
IN - SHA256 Hash for sample
OUT - List object containing extra info about the hash [Tag, Delivery Method, Source]
"""
def getDataBazaar(string_api_key, string_sha256):
        url="https://mb-api.abuse.ch/api/v1/"
        data_query = {
            "query": "get_info",
            "hash": string_sha256
        }
        
        data_headers = {'API-KEY': string_api_key }
            
        try:
            response = requests.post(url, headers=data_headers, data=data_query)
        except Exception as e:
            print(e)
            print("[Bazzar]Failed to query %s hash!" %(string_sha256))
            return [False, False, False]
        
        try:
            response_json = response.json()
        except Exception as e:
            print(e)
            print("[Bazzar]Failed to prase json for hash %s!" %(string_sha256))
            return [False, False, False]
        
        #print(string_sha256)
        response_status = const_dict_resposne_bazzar.get(response_json["query_status"],None)
        
        if(response_status != True):
            print("[Bazzar] %s hash %s" %(response_status, string_sha256))
            return [False, False, False]
        elif(response_status == None):
            print("[Bazzar]Unknown error!")
            return [False, False, False]
        
        try:
            response_json = response.json()
        except:
            print("[Bazzar]Failed to prase json for hash %s!" %(string_sha256))
            return [False, False, False]
        
        response_json = response.json()["data"][0]
        
        tags = response_json.get("tags", "n/a")
        delivery_method = response_json.get("delivery_method", "n/a")
        intelligence =  response_json.get("file_information", "n/a")
        
        if(intelligence != None):
            intelligence =  intelligence[0]
            intelligence =  intelligence.get("value", "n/a")
            
        if(tags == None):
            tags = "n/a"
        
        if(delivery_method == None):
            delivery_method = "n/a"
            
        if(intelligence == None):
            intelligence = "n/a"
        
        return [tags, delivery_method, intelligence]

"""
This function returns extra information about a SHA256 hash from Malshare
IN - API Key for Malshare
IN - SHA256 Hash for sample
OUT - List object containing extra info about the hash [First seen, File type, Tag, Source]
"""    
def getDataMalshare(string_api_key, string_sha256):
    url="https://malshare.com/api.php?"
    data_query = {
        "api_key": string_api_key,
        "action": "search",
        "query": string_sha256
    }
    
    try:
        response = requests.get(url, params=data_query, timeout=10)
    except Exception as e:
        print("[Malshare]",e)
        return [False, False, False]
    
    try:
        response_json = response.json()
    except Exception as e:
        print(e)
        print("[Malshare]Failed to prase json for hash %s!" %(string_sha256))
        return [False, False, False]
        
    utc_first_seen = datetime.utcfromtimestamp(response_json["added"]).strftime('%Y-%m-%d %H:%M:%S')
    file_type_guess = response_json["type"]
    tags = response_json["yarahits"]
    tags = tags["yara"]
    
    return [utc_first_seen, file_type_guess, tags]
    
    
    